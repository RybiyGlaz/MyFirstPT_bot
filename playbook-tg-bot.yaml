- name: Telegram Bot
  hosts: postgres_master, postgres_replication
  become: true
  tasks:
    - name: Install essential packages
      apt:
        pkg:
          - git
          - python3-pip
          - postgresql-contrib
          - postgresql-common
          - sysstat
          - libpq-dev
          - python3-psycopg2
        state: present
        update_cache: yes

    - name: apt cache update
      apt:
        update_cache: yes
        cache_valid_time: 172800

    - name: Install psycopg2 via pip
      pip:
        name: psycopg2-binary
        state: present
        executable: pip3

    - name: Install python3 and additional packages
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: present

    - name: Ensure work directory is clean
      file:
        path: "{{ WORKDIR }}"
        state: absent
      become: true

    - name: Create work directory
      file:
        path: "{{ WORKDIR }}"
        state: directory
      become: true

    - name: Clone TG Bot repository
      git:
        repo: "{{ GIT_URL }}"
        dest: "{{ WORKDIR }}"
        version: bot

    - name: Download main.py from GitHub
      get_url:
        url: "https://raw.githubusercontent.com/RybiyGlaz/MyFirstPT_bot/bot/main.py"
        dest: "{{ WORKDIR }}/main.py"
        mode: '0644'

    - name: Download requirements.txt from GitHub
      get_url:
        url: "https://raw.githubusercontent.com/RybiyGlaz/MyFirstPT_bot/bot/requirements.txt"
        dest: "{{ WORKDIR }}/requirements.txt"
        mode: '0644'

    - name: Install python packages from requirements.txt
      pip:
        requirements: "{{ WORKDIR }}/requirements.txt"
        executable: pip3

- name: PostgreSQL deployment and preliminary replication setup
  hosts: postgres_master
  become: true
  tasks:
    - name: Install postgresql
      apt:
        name:
          - postgresql-{{ POSTGRES_VERSION }}
          - postgresql-contrib
        state: present
        update_cache: yes
      register: postgres_install_result

    - name: Check installation
      fail:
        msg: "Failed to install PostgreSQL"
      when: postgres_install_result is failed

    - name: Configure postgresql
      blockinfile:
        path: /etc/postgresql/{{ POSTGRES_VERSION }}/main/postgresql.conf
        block: |
          listen_addresses = '*'
          port = {{ DB_PORT }}
          archive_mode = on
          archive_command = 'cp %p /oracle/pg_data/archive/%f'
          max_wal_senders = 10
          wal_level = replica
          wal_log_hints = on
          log_replication_commands = on

    - name: Make archive directory
      file:
        path: /oracle/pg_data/archive
        state: directory
        owner: "{{ DB_USER }}"
        group: "{{ DB_USER }}"
        recurse: yes

    - name: Configure pg_hba.conf
      blockinfile:
        path: /etc/postgresql/{{ POSTGRES_VERSION }}/main/pg_hba.conf
        block: |
          local all {{ DB_USER }} peer
          host replication all {{ DB_REPL_HOST }}/24 scram-sha-256
          host all all {{ DB_HOST }}/32 trust

    - name: Restart postgresql
      systemd:
        name: postgresql
        state: restarted

    - name: Check if PostgreSQL is running
      become_user: postgres
      shell: pg_isready -q
      register: postgresql_running
      changed_when: false
      failed_when: false

    - name: Drop existing database
      become_user: postgres
      postgresql_db:
        name: "{{ DB_DATABASE }}"
        state: absent
      when: postgresql_running is succeeded

    - name: Create database
      become_user: postgres
      postgresql_db:
        name: "{{ DB_DATABASE }}"
        state: present
      when: postgresql_running is succeeded

    - name: Copy init.sql
      copy:
        src: init.sql
        dest: /tmp/init.sql

    - name: Change permissions of init.sql
      file:
        path: /tmp/init.sql
        owner: "{{ DB_USER }}"
        group: "{{ DB_USER }}"
        mode: '0644'

    - name: Replace DB_DATABASE in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_DATABASE"
        replace: "{{ DB_DATABASE }}"

    - name: Replace DB_REPL_USER in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_USER"
        replace: "{{ DB_REPL_USER }}"

    - name: Replace DB_REPL_PASSWORD in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_REPL_PASSWORD"
        replace: "{{ DB_REPL_PASSWORD }}"

    - name: Run init.sql
      command: /usr/bin/psql -a -f /tmp/init.sql
      become: true
      become_user: "{{ DB_USER }}"

- name: Configure postgresql replication
  hosts: postgres_replication
  become: true
  tasks:
    - name: Install postgresql
      apt:
        name:
          - postgresql-{{ POSTGRES_VERSION }}
          - postgresql-contrib
        state: present
        update_cache: yes

    - name: Configure postgresql
      lineinfile:
        path: /etc/postgresql/{{ POSTGRES_VERSION }}/main/postgresql.conf
        regexp: "^#listen_addresses ="
        line: "listen_addresses = '*'"
      become_user: postgres

    - name: Stop postgresql
      systemd:
        name: postgresql
        state: stopped

    - name: Remove all databases
      command: rm -rf /var/lib/postgresql/{{ POSTGRES_VERSION }}/main/
      become: true

    - name: Set permissions for the replication directory
      file:
        path: /var/lib/postgresql/{{ POSTGRES_VERSION }}/main/
        owner: postgres
        group: postgres
        recurse: yes
      become: true

    - name: Start replication
      command: pg_basebackup -h {{ DB_HOST }} -D /var/lib/postgresql/{{ POSTGRES_VERSION }}/main/ -p {{ DB_PORT }} -U {{ DB_REPL_USER }} -vP -w
      become: true
      become_user: postgres
      environment:
        PGPASSWORD: "{{ DB_REPL_PASSWORD }}"

    - name: Ensure log file is readable
      file:
        path: /var/log/postgresql/postgresql-14-main.log
        mode: '0644'
        owner: postgres
        group: postgres

    - name: Start postgresql
      systemd:
        name: postgresql
        state: started

- name: Bot playbook
  hosts: postgres_master
  become: yes
  tasks:
    - name: Install python packages
      pip:
        name:
          - python-telegram-bot[all]==13.7
          - paramiko
          - psycopg2-binary
          - python-dotenv

    - name: Chown project dir
      command: chown -R {{ RM_USER }}:{{ RM_USER }} {{ WORKDIR }}

    - name: Create .env file
      copy:
        dest: "{{ WORKDIR }}/.env"
        content: |
          TOKEN={{ TOKEN }}
          DB_HOST={{ DB_HOST }}
          DB_USER={{ DB_USER }}
          DB_PASSWORD={{ DB_PASSWORD }}
          DB_DATABASE={{ DB_DATABASE }}
          RM_HOST={{ RM_HOST }}
          RM_PORT={{ RM_PORT }}
          RM_USER={{ RM_USER }}
          RM_PASSWORD={{ RM_PASSWORD }}

    - name: Start TG bot
      shell:
        cmd: python3 {{ WORKDIR }}/main.py
